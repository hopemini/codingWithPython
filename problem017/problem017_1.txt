미로탈출 로봇 대회를 개최하였다. 대회에 사용되는 미로는 가로(W), 세로(H) 100이하의 크기이며, 
미로를 한 칸 이동하는 데는 1초가 걸린다.

17_1.jpg 참고

로봇이 출발점에서 도착점까지 가장 빨리 이동할 경우 걸리는 시간을 구하는 프로그램을 작성하시오.
(Hint: BFS 사용)

<* 입출력 Template이 필요한 경우 Python 제출은 다음 코드를 복사하여 코드를 작성하시오.>

import sys


def Input_Data():
	readl = sys.stdin.readline
	W, H = map(int, readl().split())
	sw, sh, ew, eh = map(int, readl().split())
	map_maze = [[0] + list(map(int, readl().strip())) + [0] if 1<=h<=H else [0] * (W+2) for h in range(H+2)]
	return W, H, sw, sh, ew, eh, map_maze


sol = -1
# 입력 받는 부분
W, H, sw, sh, ew, eh, map_maze = Input_Data()

# 여기서부터 작성



# 출력하는 부분
print(sol)

<입력 설명>
첫 줄에 미로의 크기 W, H(1≤W, H≤100)가 주어진다.
둘째 줄에 출발점 w, h 좌표와 도착점 w, h 좌표가 공백으로 구분하여 주어진다.
셋째 줄부터 미로의 정보가 길은 0, 벽은 1로 공백이 없이 들어온다.
주의 사항으로, 좌표는 좌측상단이 가장 작은 위치이며 이 위치의 좌표는 (1,1)이다.

<출력 설명>
첫 줄에 출발점에서 도착점까지 가장 빠른 시간을 출력한다.

<입력 예시>
8 7
1 2 7 5
11111111
00000111
10110011
10111001
10111101
10000001
11111111

<출력 예시>
9

<부가정보>
[입력 예시 2]
8 10
1 1 7 9
00000101
11001000
10000010
01101010
00000110
01010000
01110110
10000100
10011101
01000001
 
[출력 예시 2]
16
 
[입력 예시 3]
5 5
1 1 5 5
00000
01101
00100
01110
00000
 
[출력 예시 3]
8